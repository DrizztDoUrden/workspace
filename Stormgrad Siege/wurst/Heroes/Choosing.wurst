	package Choosing
	import SSGlobals
	import SSMultiBoard
	import Inquisitor
	import DFDebugger
	import UnitClass
	DebugStream debugstream
	player udg_Owner
	unit udg_Sold_unit
	trigger trg_HERO_CHOISE
	trigger trg_Pass
	integer udg_herolevel
	
	function trig_Pass_Actions()
		unit u
		unit newcircle
		location l
		integer i
		if (GetSpellAbilityId() == 'A007')
			u = GetTriggerUnit()
			l = GetStartLocationLoc(GetPlayerStartLocation(GetOwningPlayer(u)))
			switch (GetUnitTypeId(u))
				case 'h001'
					newcircle = CreateUnitAtLoc(GetOwningPlayer(u), 'n000', l, bj_UNIT_FACING)
				case 'n000'
					newcircle = CreateUnitAtLoc(GetOwningPlayer(u), 'n006', l, bj_UNIT_FACING)
				case 'n006'
					newcircle = CreateUnitAtLoc(GetOwningPlayer(u), 'h001', l, bj_UNIT_FACING)
				case 'n001'
					newcircle = CreateUnitAtLoc(GetOwningPlayer(u), 'n002', l, bj_UNIT_FACING)
				case 'n002'
					newcircle = CreateUnitAtLoc(GetOwningPlayer(u), 'n007', l, bj_UNIT_FACING)
				default//case 'n007'
					newcircle = CreateUnitAtLoc(GetOwningPlayer(u), 'n001', l, bj_UNIT_FACING)
			RemoveLocation(l)
			i = -1
			while (i < 5)
				i++
				UnitAddItem( newcircle, UnitItemInSlot(u, i) )
			if (GetLocalPlayer() == GetOwningPlayer(u))
				ClearSelection()
				SelectUnit(newcircle, true)
			RemoveUnit( u )
			circles[1 + GetPlayerId(GetTriggerPlayer())] = newcircle
	
	function trig_HERO_CHOISE_Conditions() returns boolean
		return GetUnitTypeId(GetTriggerUnit()) == 'h001' or GetUnitTypeId(GetTriggerUnit()) == 'n002' or GetUnitTypeId(GetTriggerUnit()) == 'n000' or GetUnitTypeId(GetTriggerUnit()) == 'n007' or GetUnitTypeId(GetTriggerUnit()) == 'n006' or GetUnitTypeId(GetTriggerUnit()) == 'n001' or GetUnitTypeId(GetTriggerUnit()) == 'n009'
	
	function trig_HERO_CHOISE_enuming1()
		SetPlayerTechMaxAllowed(GetEnumPlayer(), GetUnitTypeId(udg_Sold_unit), 0)
		SetPlayerTechMaxAllowed(GetEnumPlayer(), GetUnitTypeId(curent_Player_Hero[1 + GetPlayerId(udg_Owner)]), -1)
	
	function trig_HERO_CHOISE_enuming2()
		SetPlayerTechMaxAllowed(GetEnumPlayer(), GetUnitTypeId(udg_Sold_unit), 0)
	
	function trig_HERO_CHOISE_Actions()
		udg_Owner = GetOwningPlayer(GetTriggerUnit())
		udg_Sold_unit = GetSoldUnit()
		// ----------------------
		if ( GetPlayerRace(udg_Owner) == RACE_HUMAN )
			if ( not alreadypickedA )
				alreadypickedA = true
				alliance_Maxlevel = udg_Sold_unit
				onLvlMaxing(alliance_Maxlevel)
				ConditionalTriggerExecute( gg_trg_First_Aliance_quest_begin )
				questA = true
		else
			if ( not alreadypickedH )
				alreadypickedH = true
				horde_Maxlevel = udg_Sold_unit
				onLvlMaxing(horde_Maxlevel)
				ConditionalTriggerExecute( gg_trg_First_Horde_quest_begin )
				questH = true
		// ----------------------
		if ( not player_already_has_hero[1 + GetPlayerId(udg_Owner)] )
			player_already_has_hero[1 + GetPlayerId(udg_Owner)] = true
			ForForce( GetPlayersByMapControl(MAP_CONTROL_USER), function trig_HERO_CHOISE_enuming2 )
		else
			ForForce( GetPlayersByMapControl(MAP_CONTROL_USER), function trig_HERO_CHOISE_enuming1 )
			UnitAddItem( udg_Sold_unit, UnitItemInSlot(curent_Player_Hero[1 + GetPlayerId(udg_Owner)], 0) )
			UnitAddItem( udg_Sold_unit, UnitItemInSlot(curent_Player_Hero[1 + GetPlayerId(udg_Owner)], 1) )
			UnitAddItem( udg_Sold_unit, UnitItemInSlot(curent_Player_Hero[1 + GetPlayerId(udg_Owner)], 2) )
			UnitAddItem( udg_Sold_unit, UnitItemInSlot(curent_Player_Hero[1 + GetPlayerId(udg_Owner)], 3) )
			UnitAddItem( udg_Sold_unit, UnitItemInSlot(curent_Player_Hero[1 + GetPlayerId(udg_Owner)], 4) )
			UnitAddItem( udg_Sold_unit, UnitItemInSlot(curent_Player_Hero[1 + GetPlayerId(udg_Owner)], 5) )
			udg_herolevel = GetHeroXP(curent_Player_Hero[1 + GetPlayerId(udg_Owner)])
			SetHeroXP( udg_Sold_unit, ( udg_herolevel div 2 ), true )
			RemoveUnit( curent_Player_Hero[1 + GetPlayerId(udg_Owner)] )
		// ----------------------
		//if (TriggerEvaluate(trg_HERO_CHOISE))	//Хз, зачем сторубу этот кусок. Пусть пока будет так.
		//	TriggerExecute(trg_HERO_CHOISE)		//P.S.: Если не выбрать гера/баги с этим делом - раскоментируй.
		// ----------------------
		if ( curent_Player_Hero[1 + GetPlayerId(udg_Owner)] != null )
			DisplayTextToPlayer( GetLocalPlayer(), 0, 0, ( ( GetPlayerName(udg_Owner) + " : " ) + ( GetUnitName(curent_Player_Hero[1 + GetPlayerId(udg_Owner)]) + ( "  ==>  " + GetUnitName(udg_Sold_unit) ) ) ) )
		else
			DisplayTextToPlayer( GetLocalPlayer(), 0, 0, ( ( GetPlayerName(udg_Owner) + " : " ) + GetUnitName(udg_Sold_unit) ) )
		// ----------------------
		UnitAddAbility( udg_Sold_unit, 'A03T' )
		UnitAddAbility( udg_Sold_unit, 'A03S' )
		curent_Player_Hero[1 + GetPlayerId(udg_Owner)] = udg_Sold_unit
		SelectUnitForPlayerSingle( udg_Sold_unit, udg_Owner )
		SetPlayerAlliance(udg_Owner, Player(2), ALLIANCE_SHARED_VISION, true)
		SetPlayerAlliance(udg_Owner, Player(11), ALLIANCE_SHARED_VISION, true)
		if ( GetUnitTypeId(udg_Sold_unit) == 'U003' )
			dk = udg_Sold_unit
		if ( GetUnitTypeId(udg_Sold_unit) == 'H007' )
			sniper = udg_Sold_unit
		if ( GetUnitTypeId(udg_Sold_unit) == 'O000' )
			oderg = udg_Sold_unit
		if ( GetUnitTypeId(udg_Sold_unit) == 'H006' )
			ecsgumation_owner = udg_Sold_unit
		if ( GetUnitTypeId(udg_Sold_unit) == 'H00O' )
			initializeInquisitor(udg_Sold_unit)
		SetPlayerTechMaxAllowed(udg_Owner, 'R000', 0)
		SetPlayerTechMaxAllowed(udg_Owner, 'R001', 0)
		SetPlayerTechMaxAllowed(udg_Owner, 'R002', 0)
		onPick(udg_Sold_unit)
		new Unit(udg_Sold_unit)
	
	//===========================================================================
	init
		debugstream = new DebugStream("SS AoS - main debug")
		debugstream.writeln("choosing init")
		trg_Pass = CreateTrigger(  )
		trg_HERO_CHOISE = CreateTrigger(  )
		TriggerRegisterAnyUnitEventBJ( trg_Pass, EVENT_PLAYER_UNIT_SPELL_CAST )
		TriggerRegisterAnyUnitEventBJ( trg_HERO_CHOISE, EVENT_PLAYER_UNIT_SELL )
		TriggerAddAction( trg_Pass, function trig_Pass_Actions )
		TriggerAddAction( trg_HERO_CHOISE, function trig_HERO_CHOISE_Actions )
		TriggerAddCondition( trg_HERO_CHOISE, Condition( function trig_HERO_CHOISE_Conditions ) )
endpackage
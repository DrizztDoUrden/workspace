package Inquisitor
	import Bonus
	import LinkedList
	Bonus thisBonus
	trigger trg_rage
	trigger trg_oblivion
	trigger trg_call
	trigger trg_Revelation
	trigger trg_fires
	integer strPlus
	integer intMinus
	unit inquisitor = null
	boolean initialized = false
	real firesTickStacks
	constant integer abilityRage = 'A046'
	constant integer abilityOblivion = 'A047'
	constant integer abilityCall = 'A000'
	constant integer abilityRevelation = 'A049'
	constant integer abilityFires = 'A048'
	
	class Madness
		private integer life
		private integer ammount
		private unit owner
		private static trigger trg_Destructor
		private static trigger trg_Madness
		private static LinkedList<Madness> stacks
		
		private static function trg_Madness_Actions()
			new Madness(GetAttacker(), 1)
		
		private static function trg_Destructor_Actions()
			integer i
			integer newint
			let iterator = stacks.iterator()
			while iterator.hasNext()
				Madness m = iterator.next()
				m.life--
				if (m.life <= 0)
					iterator.remove()
			iterator.close()
			i = Madness.getStacks(inquisitor) div 2
			SetHeroStr(inquisitor, GetHeroStr(inquisitor, false) + i - strPlus, true)
			newint = GetHeroInt(inquisitor, false) - i + intMinus
			if (newint < 5)
				newint = 5
			SetHeroInt(inquisitor, newint, true)
			strPlus = i
			intMinus = i
		
		static function getStacks(unit target) returns integer
			integer i = 0
			for Madness m in stacks
				if (m.owner == target)
					i += m.ammount
			return i
		
		static function removeStacks(unit target, integer number)
			int i = number
			let iterator = stacks.iterator()
			while (iterator.hasNext() and i > 0)
				Madness m = iterator.next()
				if (m.owner == target)
					iterator.remove()
					i--
			iterator.close()
		
		static function nullifyStacks(unit target)
			let iterator = stacks.iterator()
			while iterator.hasNext()
				Madness m = iterator.next()
				if (m.owner == target)
					iterator.remove()
			iterator.close()
		
		construct(unit target, int number)
			life = 60
			stacks.add(this)
			owner = target
			ammount = number
			
		static function initialization()
			trg_Madness = CreateTrigger()
			trg_Destructor = CreateTrigger()
			TriggerAddAction(trg_Madness, function trg_Madness_Actions)
			TriggerAddAction(trg_Destructor, function trg_Destructor_Actions)
			TriggerRegisterUnitEvent(trg_Madness, inquisitor, EVENT_UNIT_ATTACKED)
			TriggerRegisterTimerEvent(trg_Destructor, 1, true)
	
	function rage_Conditions() returns boolean
		return GetSpellAbilityId() == abilityRage
	
	function rage_Actions()
		unit u = GetSpellTargetUnit()
		if (u == inquisitor)
			SetUnitState(u, UNIT_STATE_LIFE, GetUnitState(u, UNIT_STATE_LIFE) + Madness.getStacks(u) * 3 * GetUnitAbilityLevel(u, abilityRage))
		else
			SetUnitState(u, UNIT_STATE_LIFE, GetUnitState(u, UNIT_STATE_LIFE) - Madness.getStacks(u) * 5 * GetUnitAbilityLevel(u, abilityRage))
		Madness.nullifyStacks(u)
	
	function oblivion_Conditions() returns boolean
		return GetSpellAbilityId() == abilityOblivion
	
	function oblivion_Actions()
		unit u = GetSpellTargetUnit()
		SetUnitState(u, UNIT_STATE_LIFE, GetUnitState(u, UNIT_STATE_LIFE) - Madness.getStacks(u) * 2 * GetUnitAbilityLevel(u, abilityOblivion))
		//invisibility should be here?
		new Madness(inquisitor, Madness.getStacks(u))
		Madness.nullifyStacks(u)
	
	function fires_Conditions() returns boolean
		return GetSpellAbilityId() == abilityFires
	
	function fires_Filter() returns boolean
		return IsPlayerAlly(GetOwningPlayer(inquisitor), GetOwningPlayer(GetFilterUnit()))
	
	function fires_Actions()
		group g = CreateGroup()
		integer i = 0
		location l = GetSpellTargetLoc()
		while i < 10
			g = GetUnitsInRangeOfLocMatching(300, l, Condition(function fires_Filter))
			for unit u in g
				SetUnitState(u, UNIT_STATE_LIFE, GetUnitState(u, UNIT_STATE_LIFE) - (Madness.getStacks(u) + 5) * 1 * GetUnitAbilityLevel(u, abilityFires))
				firesTickStacks += Madness.getStacks(u) * 0.06 * (1.25 - 0.25 * GetUnitAbilityLevel(u, abilityFires))
				Madness.removeStacks(u, R2I(Madness.getStacks(u) * 0.2 * (1.25 - 0.25 * GetUnitAbilityLevel(u, abilityFires))))
			g.clear()
			i++
		DestroyGroup(g)
	
	function revelation_Actions()
		if (GetUnitAbilityLevel(inquisitor, abilityRevelation) > 0)
			thisBonus.setMaxMana(GetHeroStr(inquisitor, true) * 2 + Madness.getStacks(inquisitor) * 3)
	
	public function initializeInquisitor(unit hero)
		if (not initialized)
			initialized = true
			inquisitor = hero
			thisBonus = new Bonus(inquisitor, 0)
			Madness.initialization()
			trg_rage = CreateTrigger()
			trg_oblivion = CreateTrigger()
			//trg_call = CreateTrigger()
			trg_Revelation = CreateTrigger()
			trg_fires = CreateTrigger()
			TriggerAddAction(trg_rage, function rage_Actions)
			TriggerAddAction(trg_oblivion, function oblivion_Actions)
			TriggerAddAction(trg_Revelation, function revelation_Actions)
			TriggerAddAction(trg_fires, function fires_Actions)
			TriggerRegisterTimerEvent(trg_Revelation, 0.5, true)
			TriggerRegisterUnitEvent(trg_rage, inquisitor, EVENT_UNIT_SPELL_EFFECT)
			TriggerRegisterUnitEvent(trg_oblivion, inquisitor, EVENT_UNIT_SPELL_EFFECT)
			TriggerRegisterUnitEvent(trg_fires, inquisitor, EVENT_UNIT_SPELL_EFFECT)
			TriggerAddCondition(trg_rage, Condition(function rage_Conditions))
			TriggerAddCondition(trg_oblivion, Condition(function oblivion_Conditions))
			TriggerAddCondition(trg_fires, Condition(function fires_Conditions))
		else
			inquisitor = hero
			destroy thisBonus
			thisBonus = new Bonus(inquisitor, 0)
			
endpackage